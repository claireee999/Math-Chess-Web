{"ast":null,"code":"var _jsxFileName = \"/Users/clairesheng/GitHub/Math-Chess-Web/src/components/ChineseCheckerBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ChineseCheckerBoard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Player = /*#__PURE__*/function (Player) {\n  Player[\"RED\"] = \"red\";\n  Player[\"BLUE\"] = \"blue\";\n  return Player;\n}(Player || {});\nconst INITIAL_BOARD_STATE = [[null, null, null, null, null, null, Player.BLUE, Player.BLUE, Player.BLUE], [null, null, null, null, null, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE], [null, null, null, null, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE], [null, null, null, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE], [null, null, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE], [null, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE], [Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE], [Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED], [Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED], [Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED], [Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED], [Player.RED, Player.RED, Player.RED, Player.RED, Player.RED], [Player.RED, Player.RED, Player.RED, Player.RED], [Player.RED, Player.RED, Player.RED], [Player.RED, Player.RED], [Player.RED]];\nconst ChineseCheckerBoard = () => {\n  _s();\n  const [board, setBoard] = useState(INITIAL_BOARD_STATE);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [currentPlayer, setCurrentPlayer] = useState(Player.RED);\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (selectedPiece) {\n      movePiece(rowIndex, colIndex);\n    } else {\n      selectPiece(rowIndex, colIndex);\n    }\n  };\n  const selectPiece = (rowIndex, colIndex) => {\n    const piece = board[rowIndex][colIndex];\n    if (piece === currentPlayer) {\n      setSelectedPiece([rowIndex, colIndex]);\n    }\n  };\n  const movePiece = (rowIndex, colIndex) => {\n    const [selectedRow, selectedCol] = selectedPiece;\n    const isValidMove = canMovePiece(selectedRow, selectedCol, rowIndex, colIndex);\n    if (isValidMove) {\n      const newBoard = [...board];\n      newBoard[rowIndex][colIndex] = currentPlayer;\n      newBoard[selectedRow][selectedCol] = null;\n      setBoard(newBoard);\n      setSelectedPiece(null);\n      setCurrentPlayer(currentPlayer === Player.RED ? Player.BLUE : Player.RED);\n    }\n  };\n  const canMovePiece = (srcRow, srcCol, destRow, destCol) => {\n    // Implement your logic to determine if the move is valid\n    // You can use the board state to check for valid moves\n    // Return true if the move is valid, false otherwise\n    // This is just a placeholder implementation\n    const piece = board[srcRow][srcCol];\n    return piece !== null && board[destRow][destCol] === null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chinese-checker-board\",\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${cell === null ? \"\" : cell} ${selectedPiece && selectedPiece[0] === rowIndex && selectedPiece[1] === colIndex ? \"selected\" : \"\"}`,\n        onClick: () => handleCellClick(rowIndex, colIndex)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(ChineseCheckerBoard, \"S0bGB29iC6EKrZclhkeEpdNmloQ=\");\n_c = ChineseCheckerBoard;\nexport default ChineseCheckerBoard;\nvar _c;\n$RefreshReg$(_c, \"ChineseCheckerBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Player","INITIAL_BOARD_STATE","BLUE","RED","ChineseCheckerBoard","_s","board","setBoard","selectedPiece","setSelectedPiece","currentPlayer","setCurrentPlayer","handleCellClick","rowIndex","colIndex","movePiece","selectPiece","piece","selectedRow","selectedCol","isValidMove","canMovePiece","newBoard","srcRow","srcCol","destRow","destCol","className","children","map","row","cell","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/clairesheng/GitHub/Math-Chess-Web/src/components/ChineseCheckerBoard.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./ChineseCheckerBoard.css\";\n\nenum Player {\n    RED = \"red\",\n    BLUE = \"blue\",\n}\n\ntype BoardState = (Player | null)[][];\n\nconst INITIAL_BOARD_STATE: BoardState = [\n    [null, null, null, null, null, null, Player.BLUE, Player.BLUE, Player.BLUE],\n    [null, null, null, null, null, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE],\n    [null, null, null, null, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE],\n    [null, null, null, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE],\n    [null, null, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE],\n    [null, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE],\n    [Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE, Player.BLUE],\n    [Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED],\n    [Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED],\n    [Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED],\n    [Player.RED, Player.RED, Player.RED, Player.RED, Player.RED, Player.RED],\n    [Player.RED, Player.RED, Player.RED, Player.RED, Player.RED],\n    [Player.RED, Player.RED, Player.RED, Player.RED],\n    [Player.RED, Player.RED, Player.RED],\n    [Player.RED, Player.RED],\n    [Player.RED],\n];\n\nconst ChineseCheckerBoard: React.FC = () => {\n    const [board, setBoard] = useState<BoardState>(INITIAL_BOARD_STATE);\n    const [selectedPiece, setSelectedPiece] = useState<[number, number] | null>(null);\n    const [currentPlayer, setCurrentPlayer] = useState<Player>(Player.RED);\n\n    const handleCellClick = (rowIndex: number, colIndex: number) => {\n        if (selectedPiece) {\n            movePiece(rowIndex, colIndex);\n        } else {\n            selectPiece(rowIndex, colIndex);\n        }\n    };\n\n    const selectPiece = (rowIndex: number, colIndex: number) => {\n        const piece = board[rowIndex][colIndex];\n        if (piece === currentPlayer) {\n            setSelectedPiece([rowIndex, colIndex]);\n        }\n    };\n\n    const movePiece = (rowIndex: number, colIndex: number) => {\n        const [selectedRow, selectedCol] = selectedPiece!;\n        const isValidMove = canMovePiece(selectedRow, selectedCol, rowIndex, colIndex);\n        if (isValidMove) {\n            const newBoard = [...board];\n            newBoard[rowIndex][colIndex] = currentPlayer;\n            newBoard[selectedRow][selectedCol] = null;\n            setBoard(newBoard);\n            setSelectedPiece(null);\n            setCurrentPlayer(currentPlayer === Player.RED ? Player.BLUE : Player.RED);\n        }\n    };\n\n    const canMovePiece = (srcRow: number, srcCol: number, destRow: number, destCol: number): boolean => {\n        // Implement your logic to determine if the move is valid\n        // You can use the board state to check for valid moves\n        // Return true if the move is valid, false otherwise\n        // This is just a placeholder implementation\n        const piece = board[srcRow][srcCol];\n        return piece !== null && board[destRow][destCol] === null;\n    };\n\n    return (\n        <div className=\"chinese-checker-board\">\n            {board.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"row\">\n                    {row.map((cell, colIndex) => (\n                        <div\n                            key={colIndex}\n                            className={`cell ${cell === null ? \"\" : cell} ${\n                                selectedPiece && selectedPiece[0] === rowIndex && selectedPiece[1] === colIndex ? \"selected\" : \"\"\n                            }`}\n                            onClick={() => handleCellClick(rowIndex, colIndex)}\n                        ></div>\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default ChineseCheckerBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}